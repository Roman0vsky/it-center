// <auto-generated />
using System;
using ITCenterBack.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITCenterBack.Migrations
{
    [DbContext(typeof(ITCenterContext))]
    [Migration("20230606102451_seedupd")]
    partial class seedupd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ITCenterBack.Models.AboutUs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AboutUs");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "IT-центр - открывает детям двери в мир IT, не забывая об их росте как личности и прививая им важные социальные ценности. Мы больше, чем просто компьютерные курсы для детей. Мы предоставляем не только обучение программированию или робототехнике, но и все возможности для роста, общения и развития.\r\nIT-центр - стиль жизни и образ мышления, среда роста и творчества. Современный рынок цифровых продуктов - это уже не поле для деятельности специалистов-одиночек, это полигон борьбы глобальных проектов. Мы готовим специалистов, нацеленных на командную работу и общий успех!\r\n                                        ",
                            Url = "https://www.youtube.com/embed/KrreehNgcgA"
                        });
                });

            modelBuilder.Entity("ITCenterBack.Models.Application", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<string>("ListenerFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RepresentativeFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RepresentativePhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<string>("SchoolName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("ITCenterBack.Models.ApplicationTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<long>("TimeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("TimeId");

                    b.ToTable("ApplicationTimes");
                });

            modelBuilder.Entity("ITCenterBack.Models.AvaliableTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvaliable")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("TimeFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("TimeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TimeId");

                    b.ToTable("AvaliableTimes");
                });

            modelBuilder.Entity("ITCenterBack.Models.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Age")
                        .HasColumnType("longtext");

                    b.Property<int>("CourseType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Requirements")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 4L,
                            Age = "10-15 лет",
                            CourseType = 2,
                            Description = "В индустрии компьютерной графики множество направлений: пространственный дизайн, обработка фотографий, дизайн логотипов, разработка трехмерных моделей, анимации и прочее. Цель данного курса – подготовить юных слушателей к знакомству с миром компьютерной графики, дизайна, композиции. Основным инструментом на курсе является всемирно известный редактор графики Adobe Photoshop, а также некоторые другие инструменты для творчества. Все эти навыки пригодятся для дальнейшей работы с самыми известными и полезными программами на других направлениях – Illustrator, Blender, Figma. В процессе обучения, слушатели смогут раскрыть в себе творческий потенциал и интерес к изучению определенной сферы графического дизайна. Знания, полученные на курсе «Основы компьютерной графики» обязательно пригодятся и в смежных сферах – разработке сайтов, игр, видеомонтаже, робототехнике",
                            Image = "/assets/for_new/img/courses/design/starter-graphics.svg",
                            Name = "Основы компьютерной графики",
                            Requirements = "уверенные навыки использования компьютера"
                        },
                        new
                        {
                            Id = 5L,
                            Age = "8-11 лет",
                            CourseType = 1,
                            Description = "В современном мире, без навыков использования компьютера справиться с повседневными задачами в учебе и работе очень сложно. Курс «Мой компьютер» является первой ступеней в процессе подготовки будущего IT-специалиста, а также пригодится абсолютно любому современному человеку. На занятиях слушатели учатся уверенно использовать свой компьютер в качестве универсального инструмента для решения задач, обслуживать и настраивать операционную систему, изучают основные пакеты офисных программ. В рамках курса затрагиваются такие темы, как основы обработки графики, информационной безопасности и алгоритмизации",
                            Image = "/assets/for_new/img/courses/pk/my-pc.svg",
                            Name = "Мой компьютер - для начинающих",
                            Requirements = "нет"
                        },
                        new
                        {
                            Id = 6L,
                            Age = "12-17 лет",
                            CourseType = 2,
                            Description = "Мир трехмерной графики охватывает множество направлений - геймдизайн и разработка игр, архитектурная визуализация и рендеринг, анимация и визуальные эффекты, 3D - печать и . На направлении \"3D-графика\" студенты изучают один из самых известных и гибких редакторов - Blender. Редактор Blender - мощный инструмент для создания трехмерных моделей, обладающий огромным сообществом фанатов и профессионалов, а также наличием большого количества модулей и плагинов, которые позволяют решить абсолютно любую задачу - от симуляции трехмерной виртуальной одежды, до просчетов физики жидкостей! Навыки, полученные при прохождении курса, расширяют возможности юных дизайнеров в сфере графического дизайна, а также открывают двери в такие направления, как разработка игр, архитектурную визуализацию и создание видеороликов с использованием 3D графики!",
                            Image = "/assets/for_new/img/courses/3d/graphics-3d.svg",
                            Name = "3D графика, анимация и рендеринг",
                            Requirements = "предварительное прохождение курса \"Компьютерная графика\""
                        });
                });

            modelBuilder.Entity("ITCenterBack.Models.CourseApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseApplications");
                });

            modelBuilder.Entity("ITCenterBack.Models.Info", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AdressOfUniversity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FooterLogo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HeaderLogo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameOfTheCenter")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameOfUniversity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SliderBigText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SliderSmallText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Info");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AdressOfUniversity = "Республика Беларусь 210038, г. Витебск, Московский проспект 33",
                            FooterLogo = "/images/gllg.png",
                            HeaderLogo = "/assets/for_new/img/icons/logo.svg",
                            NameOfTheCenter = "IT-центр",
                            NameOfUniversity = "ВГУ имени П.М.Машерова",
                            SliderBigText = "IT-центр",
                            SliderSmallText = "УЧРЕЖДЕНИЕ ОБРАЗОВАНИЯ \"ВГУ ИМЕНИ П.М.МАШЕРОВА\""
                        });
                });

            modelBuilder.Entity("ITCenterBack.Models.News", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ITCenterBack.Models.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Schedule");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "АКТУАЛЬНОЕ РАСПИСАНИЕ ВСЕГДА МОЖНО НАЙТИ\r\n НА СТЕНДЕ НАПРОТИВ ДЕКАНАТА (АУД. 316).",
                            Image = "/images/shedule.png"
                        });
                });

            modelBuilder.Entity("ITCenterBack.Models.School", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Гимназия № 1 имени Ж.И.Алфёрова"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Гимназия № 2"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Гимназия № 3 имени А.С.Пушкина"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Гимназия № 4"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Гимназия № 5 имени И.И.Людникова"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Гимназия № 7 имени П.Е.Кондратенко"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Гимназия № 8"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Гимназия № 9 имени А.П.Белобородова"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Средняя школа № 2 имени Ф.Т.Блохина"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Средняя школа № 3 имени Л.Н.Белицкого"
                        },
                        new
                        {
                            Id = 11L,
                            Name = "Средняя школа № 4"
                        },
                        new
                        {
                            Id = 12L,
                            Name = "Средняя школа № 5 имени Г.И.Богомазова"
                        },
                        new
                        {
                            Id = 13L,
                            Name = "Средняя школа № 6 имени А.Е.Белохвостикова"
                        },
                        new
                        {
                            Id = 14L,
                            Name = "Средняя школа № 7"
                        },
                        new
                        {
                            Id = 15L,
                            Name = "Средняя школа № 8 имени А.М.Испенкова"
                        },
                        new
                        {
                            Id = 16L,
                            Name = "Средняя школа № 9"
                        },
                        new
                        {
                            Id = 17L,
                            Name = "Средняя школа № 10 имени А.К.Горовца"
                        },
                        new
                        {
                            Id = 18L,
                            Name = "Средняя школа № 11"
                        },
                        new
                        {
                            Id = 19L,
                            Name = "Средняя школа № 12 имени Л.Н.Филипенко"
                        },
                        new
                        {
                            Id = 20L,
                            Name = "Средняя школа № 14"
                        },
                        new
                        {
                            Id = 21L,
                            Name = "Средняя школа № 15 имени М.Я.Чуманихиной"
                        },
                        new
                        {
                            Id = 22L,
                            Name = "Средняя школа № 16 имени М.И.Дружинина"
                        },
                        new
                        {
                            Id = 23L,
                            Name = "Средняя школа № 17 имени И.Р.Бумагина"
                        },
                        new
                        {
                            Id = 24L,
                            Name = "Средняя школа № 18 имени В.С.Сметанина"
                        },
                        new
                        {
                            Id = 25L,
                            Name = "Средняя школа № 19"
                        },
                        new
                        {
                            Id = 26L,
                            Name = "Средняя школа № 21 имени В.А.Демидова"
                        },
                        new
                        {
                            Id = 27L,
                            Name = "Средняя школа № 22"
                        },
                        new
                        {
                            Id = 28L,
                            Name = "Средняя школа № 23 имени О.Р.Тувальского"
                        },
                        new
                        {
                            Id = 29L,
                            Name = "Средняя школа № 24 имени М.Ф.Маскаева"
                        },
                        new
                        {
                            Id = 30L,
                            Name = "Средняя школа № 25"
                        },
                        new
                        {
                            Id = 31L,
                            Name = "Средняя школа № 27"
                        },
                        new
                        {
                            Id = 32L,
                            Name = "Средняя школа № 28 имени Е.С.Зеньковой"
                        },
                        new
                        {
                            Id = 33L,
                            Name = "Средняя школа № 29 имени В.В.Пименова"
                        },
                        new
                        {
                            Id = 34L,
                            Name = "Средняя школа № 30"
                        },
                        new
                        {
                            Id = 35L,
                            Name = "Средняя школа № 31 имени В.З.Хоружей"
                        },
                        new
                        {
                            Id = 36L,
                            Name = "Средняя школа № 33 имени И.Д.Черняховского"
                        },
                        new
                        {
                            Id = 37L,
                            Name = "Средняя школа № 34"
                        },
                        new
                        {
                            Id = 38L,
                            Name = "Средняя школа № 35"
                        },
                        new
                        {
                            Id = 39L,
                            Name = "Средняя школа № 38"
                        },
                        new
                        {
                            Id = 40L,
                            Name = "Средняя школа № 40 имени М.М.Громова"
                        },
                        new
                        {
                            Id = 41L,
                            Name = "Средняя школа № 41"
                        },
                        new
                        {
                            Id = 42L,
                            Name = "Средняя школа № 42 имени Д.Ф.Райцева"
                        },
                        new
                        {
                            Id = 43L,
                            Name = "Средняя школа № 43 имени М.Ф.Шмырёва"
                        },
                        new
                        {
                            Id = 44L,
                            Name = "Средняя школа № 44"
                        },
                        new
                        {
                            Id = 45L,
                            Name = "Средняя школа № 45 имени В.Ф.Маргелова"
                        },
                        new
                        {
                            Id = 46L,
                            Name = "Средняя школа № 46 имени И.Х.Баграмяна"
                        },
                        new
                        {
                            Id = 47L,
                            Name = "Средняя школа № 47 имени Е.Ф.Ивановского"
                        },
                        new
                        {
                            Id = 48L,
                            Name = "Специальная  школа № 26"
                        },
                        new
                        {
                            Id = 49L,
                            Name = "Витебская специальная школа-интернат"
                        });
                });

            modelBuilder.Entity("ITCenterBack.Models.SliderImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SliderImages");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Image = "/assets/for_new/img/home-clubs/2.jpg"
                        },
                        new
                        {
                            Id = 2L,
                            Image = "/assets/for_new/img/home-clubs/3.jpg"
                        },
                        new
                        {
                            Id = 3L,
                            Image = "/assets/for_new/img/home-clubs/4.jpg"
                        },
                        new
                        {
                            Id = 4L,
                            Image = "/assets/for_new/img/home-clubs/5.jpg"
                        });
                });

            modelBuilder.Entity("ITCenterBack.Models.SocialLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SocialLinks");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "ВКонтакте",
                            Url = "https://vk.com/mf_vsu"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Instagram",
                            Url = "https://www.instagram.com/fmiit_vsu/"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Телеграм",
                            Url = "https://t.me/fmiit_vsu"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Сайт факультета",
                            Url = "https://fmiit.vsu.by/"
                        });
                });

            modelBuilder.Entity("ITCenterBack.Models.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Робототехника LEGO EV3",
                            Image = "/images/Shpakov.jpg",
                            Link = "https://vsu.by/universitet/ob-universitete/236-universitet/personalii/4140-shpakov-sergej-andreevich.html",
                            Name = "Шпаков С А"
                        });
                });

            modelBuilder.Entity("ITCenterBack.Models.Time", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Times");
                });

            modelBuilder.Entity("ITCenterBack.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "974e2ae3-0076-413c-8676-5c77f93c4668",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDfmuwJUtfAKffzz8xO3eBZdE8SjWjIT6Ukd2F96Yyz21idrF6qDoojjqdY/iHfrAw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConcurrencyStamp = "5d15f7d2-2f4b-43b3-b298-f3e0ed73b3f5",
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ITCenterBack.Models.Application", b =>
                {
                    b.HasOne("ITCenterBack.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ITCenterBack.Models.ApplicationTime", b =>
                {
                    b.HasOne("ITCenterBack.Models.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCenterBack.Models.Time", "Time")
                        .WithMany()
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("ITCenterBack.Models.AvaliableTime", b =>
                {
                    b.HasOne("ITCenterBack.Models.Time", "Time")
                        .WithMany()
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Time");
                });

            modelBuilder.Entity("ITCenterBack.Models.CourseApplication", b =>
                {
                    b.HasOne("ITCenterBack.Models.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCenterBack.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("ITCenterBack.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("ITCenterBack.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCenterBack.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("ITCenterBack.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
